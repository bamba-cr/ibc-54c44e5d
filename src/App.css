import { Suspense, lazy, useCallback, useEffect, useState } from "react";
import { Navbar } from "@/components/layout/Navbar";
import { StatsCard } from "@/components/dashboard/StatsCard";
import { DashboardHeader } from "@/components/dashboard/DashboardHeader";
import { QuickActions } from "@/components/dashboard/QuickActions";
import { Users, Calendar, BookOpen, Activity } from "lucide-react";
import { useQuery } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { Skeleton } from "@/components/ui/skeleton";
import { Alert, AlertDescription } from "@/components/ui/alert";

// Lazy load para melhor performance
const OverviewChart = lazy(() => import("@/components/dashboard/OverviewChart").then(m => ({ default: m.OverviewChart })));
const ProjectsTable = lazy(() => import("@/components/dashboard/ProjectsTable").then(m => ({ default: m.ProjectsTable })));
const StudentPerformance = lazy(() => import("@/components/dashboard/StudentPerformance").then(m => ({ default: m.StudentPerformance })));

const Dashboard = () => {
  const [isClient, setIsClient] = useState(false);

  useEffect(() => {
    setIsClient(true);
  }, []);

  const fetchDashboardCounts = useCallback(async () => {
    try {
      const [students, projects] = await Promise.all([
        supabase.from("students").select("*", { count: "exact", head: true }),
        supabase.from("projects").select("*", { count: "exact", head: true })
      ]);

      if (students.error || projects.error) throw new Error("Erro ao carregar dados");

      return {
        students: students.count || 0,
        projects: projects.count || 0
      };
    } catch (error) {
      console.error("Erro ao buscar dados do dashboard:", error);
      throw error;
    }
  }, []);

  const { 
    data: counts,
    isLoading: isLoadingCounts,
    error: countsError
  } = useQuery({
    queryKey: ["dashboardCounts"],
    queryFn: fetchDashboardCounts,
    staleTime: 5 * 60 * 1000,
    refetchOnWindowFocus: false,
  });

  const renderLoadingSkeletons = () => (
    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
      {Array(4).fill(0).map((_, index) => (
        <Skeleton key={index} className="h-[140px] w-full rounded-lg" />
      ))}
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50">
      <Navbar />
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <DashboardHeader 
          title="Instituto Brasileiro Cultural e Socioeducativo - IBC"
          subtitle="Transformando vidas através da cultura e educação"
        />

        {countsError && (
          <Alert variant="destructive" className="mb-6">
            <AlertDescription>
              Erro ao carregar dados. Tente recarregar a página.
            </AlertDescription>
          </Alert>
        )}

        {/* Seção de KPIs */}
        <section className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
          {isLoadingCounts ? renderLoadingSkeletons() : (
            <>
              <StatsCard
                title="Jovens Impactados"
                value={counts?.students.toString() || "0"}
                description="Jovens beneficiados pelos programas"
                icon={<Users size={24} aria-label="Jovens" className="text-blue-600" />}
              />
              <StatsCard
                title="Projetos Culturais"
                value={counts?.projects.toString() || "0"}
                description="Projetos em andamento"
                icon={<Calendar size={24} aria-label="Projetos" className="text-green-600" />}
              />
              <StatsCard
                title="Engajamento"
                value="92%"
                description="Taxa de participação nos últimos 6 meses"
                icon={<Activity size={24} aria-label="Engajamento" className="text-purple-600" />}
              />
              <StatsCard
                title="Oficinas Realizadas"
                value="15"
                description="Oficinas de arte, cultura e educação"
                icon={<BookOpen size={24} aria-label="Oficinas" className="text-orange-600" />}
              />
            </>
          )}
        </section>

        {/* Seção de Gráficos */}
        <section className="grid grid-cols-1 lg:grid-cols-3 gap-6 mt-8">
          <div className="lg:col-span-2 bg-white p-6 rounded-lg shadow-sm">
            <h3 className="text-xl font-semibold mb-4 text-gray-800">Visão Geral</h3>
            <Suspense fallback={<Skeleton className="h-[300px] w-full" />}>
              {isClient && <OverviewChart />}
            </Suspense>
          </div>
          <div className="bg-white p-6 rounded-lg shadow-sm">
            <h3 className="text-xl font-semibold mb-4 text-gray-800">Ações Rápidas</h3>
            <QuickActions />
          </div>
        </section>

        {/* Seção de Desempenho */}
        <section className="bg-white p-6 rounded-lg shadow-sm mt-8">
          <h3 className="text-xl font-semibold mb-4 text-gray-800">Desempenho dos Alunos</h3>
          <Suspense fallback={<Skeleton className="h-[300px] w-full" />}>
            {isClient && <StudentPerformance />}
          </Suspense>
        </section>

        {/* Seção de Projetos */}
        <section className="bg-white p-6 rounded-lg shadow-sm mt-8">
          <h3 className="text-xl font-semibold mb-4 text-gray-800">Projetos em Destaque</h3>
          <Suspense fallback={<Skeleton className="h-[300px] w-full" />}>
            {isClient && <ProjectsTable />}
          </Suspense>
        </section>
      </main>
    </div>
  );
};

export default Dashboard;
